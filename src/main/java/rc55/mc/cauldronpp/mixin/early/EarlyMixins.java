package rc55.mc.cauldronpp.mixin.early;

import com.gtnewhorizon.gtnhmixins.IEarlyMixinLoader;
import com.gtnewhorizon.gtnhmixins.builders.IMixins;
import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.relauncher.IFMLLoadingPlugin;
import rc55.mc.cauldronpp.Cauldronpp;
import rc55.mc.cauldronpp.Tags;
import rc55.mc.cauldronpp.mixin.Mixins;

import java.util.List;
import java.util.Map;
import java.util.Set;

@IFMLLoadingPlugin.MCVersion("1.7.10")
public class EarlyMixins extends DummyModContainer implements IEarlyMixinLoader, IFMLLoadingPlugin {

    public EarlyMixins() {
        super(new ModMetadata());
        ModMetadata md = this.getMetadata();
        md.autogenerated = true;
        md.modId = md.name = "Cauldron++ Core";
        md.parent = Cauldronpp.MODID;
        md.version = Tags.VERSION;
    }

    @Override
    public String getMixinConfig() {
        return "mixins.cauldronpp.early.json";
    }

    @Override
    public List<String> getMixins(Set<String> loadedCoreMods) {
        return IMixins.getEarlyMixins(Mixins.class, loadedCoreMods);
//        return !loadedCoreMods.contains("") ? Utils.make(new ArrayList<>(), list -> {
//             list.add("ItemAccessor");
//             list.add("ItemGlassBottleMixin");
//             list.add("EntityPotionMixin");
//        }) : Collections.emptyList();
    }

    @Override
    public String[] getASMTransformerClass() {
        return new String[0];
    }

    @Override
    public String getModContainerClass() {
        return "rc55.mc.cauldronpp.mixin.early.EarlyMixins";
    }

    @Override
    public String getSetupClass() {
        return null;
    }

    @Override
    public void injectData(Map<String, Object> data) {
    }

    @Override
    public String getAccessTransformerClass() {
        return null;
    }
}
